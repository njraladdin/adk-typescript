/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { FunctionCall, Content, Part } from '../models/types';

/**
 * Container for intermediate data that an agent would generate as it responds with a final answer.
 */
export interface IntermediateData {
  /**
   * Tool use trajectory in chronological order.
   */
  toolUses: FunctionCall[];

  /**
   * Intermediate responses generated by sub-agents to convey progress or status
   * in a multi-agent system, distinct from the final response.
   */
  intermediateResponses: Part[];
}

/**
 * Represents a single invocation.
 */
export interface Invocation {
  /**
   * Unique identifier for the invocation.
   */
  invocationId: string;

  /**
   * Content provided by the user in this invocation.
   */
  userContent: Content;

  /**
   * Final response from the agent that acts a reference or benchmark.
   */
  finalResponse?: Content;

  /**
   * Reference intermediate steps generated as a part of Agent execution.
   * 
   * For a multi-agent system, it is also helpful to inspect the route that
   * the agent took to generate final response.
   */
  intermediateData: IntermediateData;

  /**
   * Timestamp for the current invocation, primarily intended for debugging purposes.
   */
  creationTimestamp: number;
}

/**
 * Values that help initialize a Session.
 */
export interface SessionInput {
  /**
   * The name of the app.
   */
  appName: string;

  /**
   * The user id.
   */
  userId: string;

  /**
   * The state of the session.
   */
  state: Record<string, any>;
}

/**
 * An eval case.
 */
export interface EvalCase {
  /**
   * Unique identifier for the evaluation case.
   */
  evalId: string;

  /**
   * A conversation between the user and the Agent. The conversation can have any number of invocations.
   */
  conversation: Invocation[];

  /**
   * Session input that will be passed on to the Agent during eval.
   * It is common for Agents state to be initialized to some initial/default value,
   * for example, your agent may need to know today's date.
   */
  sessionInput: SessionInput;

  /**
   * The time at which this eval case was created.
   */
  creationTimestamp: number;
}

/**
 * Factory function to create a default IntermediateData instance.
 */
export function createIntermediateData(
  overrides: Partial<IntermediateData> = {}
): IntermediateData {
  return {
    toolUses: [],
    intermediateResponses: [],
    ...overrides
  };
}

/**
 * Factory function to create a default Invocation instance.
 */
export function createInvocation(
  invocationId: string,
  userContent: Content,
  overrides: Partial<Omit<Invocation, 'invocationId' | 'userContent'>> = {}
): Invocation {
  return {
    invocationId,
    userContent,
    intermediateData: createIntermediateData(),
    creationTimestamp: Date.now() / 1000, // Convert to seconds to match Python timestamp format
    ...overrides
  };
}

/**
 * Factory function to create a default SessionInput instance.
 */
export function createSessionInput(
  appName: string,
  userId: string,
  overrides: Partial<Omit<SessionInput, 'appName' | 'userId'>> = {}
): SessionInput {
  return {
    appName,
    userId,
    state: {},
    ...overrides
  };
}

/**
 * Factory function to create a default EvalCase instance.
 */
export function createEvalCase(
  evalId: string,
  sessionInput: SessionInput,
  overrides: Partial<Omit<EvalCase, 'evalId' | 'sessionInput'>> = {}
): EvalCase {
  return {
    evalId,
    sessionInput,
    conversation: [],
    creationTimestamp: Date.now() / 1000, // Convert to seconds to match Python timestamp format
    ...overrides
  };
} 