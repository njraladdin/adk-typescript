

import { LlmAgent as Agent } from '../../../../src';
import { LlmRegistry } from '../../../../src/models/LlmRegistry';
import { AutoFlow } from '../../../../src/flows/llm_flows/AutoFlow';

// Create model instance
const geminiModel = LlmRegistry.newLlm('gemini-1.5-flash');

// Create flow instances
const autoFlow = new AutoFlow();

/**
 * Research plan agent for generating structured research plans
 */
export const researchPlanAgent = new Agent('research_plan_agent', {
  description: 'I can help generate research plan.',
  llm: geminiModel,
  instruction: `\
Your task is to create a research plan according to the user's query.

# Here are the instructions for creating the research plan:

+ Focus on finding specific things, e.g. products, data, etc.
+ Have the personality of a work colleague that is very helpful and explains things very nicely.
+ Don't mention your name unless you are asked.
+ Think about the most common things that you would need to research.
+ Think about possible answers when creating the plan.
+ Your task is to create the sections that should be researched. You will output high level headers, preceded by ##
+ Underneath each header, write a short sentence on what we want to find there.
+ The headers will follow the logical analysis pattern, as well as logical exploration pattern.
+ The headers should be a statement, not be in the form of questions.
+ The header will not include roman numerals or anything of the sort, e.g. ":", etc
+ Do not include things that you cannot possibly know about from using Google Search: e.g. sales forecasting, competitors, profitability analysis, etc.
+ Do not have an executive summary
+ In each section describe specifically what will be researched.
+ Never use "we will", but rather "I will".
+ Don't ask for clarifications from the user.
+ Do not ask the user for clarifications or if they have any other questions.
+ All headers should be bolded.
+ If you have steps in the plan that depend on other information, make sure they are 2 diferent sections in the plan.
+ At the end mention that you will start researching.

# Instruction on replying format

+ Start with your name as "[research_plan_agent]: ".
+ Output the content you want to say.

Output summary:
`,
  flow: autoFlow,
  subAgents: [],
  generateContentConfig: {
    temperature: 0.1
  }
});

/**
 * Question generation agent for generating research questions
 */
export const questionGenerationAgent = new Agent('question_generation_agent', {
  description: 'I can help generate questions related to user\'s question.',
  llm: geminiModel,
  instruction: `\
Generate questions related to the research plan generated by research_plan_agent.

# Instruction on replying format

Your reply should be a numbered lsit.

For each question, reply in the following format: "[question_generation_agent]: [generated questions]"

Here is an example of the generated question list:

1. [question_generation_agent]: which state is San Jose in?
2. [question_generation_agent]: how google website is designed?
`,
  flow: autoFlow,
  subAgents: [],
  generateContentConfig: {
    temperature: 0.1
  }
});

/**
 * Information retrieval agent for answering generated questions
 */
export const informationRetrievalAgent = new Agent('information_retrieval_agent', {
  description: 'I can help retrieve information related to question_generation_agent\'s question.',
  llm: geminiModel,
  instruction: `\
Inspect all the questions after "[question_generation_agent]: " and asnwer them.

# Instruction on replying format

Always start with "[information_retrieval_agent]: "

For the answer of one question:

- Start with a title with one line summary of the reply.
- The title line should be bolded and starts with No.x of the corresponding question.
- Have a paragraph of detailed explain.

# Instruction on exiting the loop

- If you see there are less than 20 questions by "question_generation_agent", do not say "[exit]".
- If you see there are already great or equal to 20 questions asked by "question_generation_agent", say "[exit]" at last to exit the loop.
`,
  flow: autoFlow,
  subAgents: [],
  generateContentConfig: {
    temperature: 0.1
  }
});

/**
 * Question sources generation agent for managing the question/answer loop
 */
export const questionSourcesGenerationAgent = new Agent('question_sources_generation_agent', {
  description: 'I can help generate questions and retrieve related information.',
  llm: geminiModel,
  instruction: 'Generate questions and retrieve information.',
  flow: autoFlow,
  subAgents: [
    questionGenerationAgent,
    informationRetrievalAgent
  ],
  generateContentConfig: {
    temperature: 0.1
  }
});

/**
 * Summary agent for summarizing the collected information
 */
export const summaryAgent = new Agent('summary_agent', {
  description: 'I can help summarize information of previous content.',
  llm: geminiModel,
  instruction: `\
Summarize information in all historical messages that were replied by "question_generation_agent" and "information_retrieval_agent".

# Instruction on replying format

- The output should be like an essay that has a title, an abstract, multiple paragraphs for each topic and a conclusion.
- Each paragraph should maps to one or more question in historical content.
`,
  flow: autoFlow,
  generateContentConfig: {
    temperature: 0.8
  }
});

/**
 * Research assistant that manages the full research workflow
 */
export const researchAssistant = new Agent('research_assistant', {
  description: 'I can help with research question.',
  llm: geminiModel,
  instruction: 'Help customers with their need.',
  flow: autoFlow,
  subAgents: [
    researchPlanAgent,
    questionSourcesGenerationAgent,
    summaryAgent
  ],
  generateContentConfig: {
    temperature: 0.1
  }
});

/**
 * Spark agent that serves as the top-level agent
 */
export const sparkAgent = new Agent('spark_assistant', {
  description: 'I can help with non-research question.',
  llm: geminiModel,
  instruction: 'Help customers with their need.',
  flow: autoFlow,
  subAgents: [researchAssistant],
  generateContentConfig: {
    temperature: 0.1
  }
});

/**
 * Root agent for the flow complex spark fixture
 */
export const flowComplexSparkRootAgent = sparkAgent; 